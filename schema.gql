# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Blockchain {
  id: String!
  text: String!
  info: String!
  symbols: [String!]
  prefix: Int
  tag: BlockchainTag!
  decimal: Int!
  logo: String!
  color: String!
}

enum BlockchainTag {
  POLKADOT
  KUSAMA
  MOONBEAM
  MOONRIVER
  ASTAR
  SUBSOCIAL
}

type TransferNative {
  id: String!
  blockchain: Blockchain!
  blockNumber: Int!
  extrinsicHash: String
  eventIndex: Int
  timestamp: DateTime!
  amount: BigInt!
  fee: BigInt
  success: Boolean!
  from: Account!
  to: Account!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type VoteNative {
  id: String!
}

type Transaction {
  id: String!
  txKind: TransactionKind!
  transferNative: TransferNative
  voteNative: VoteNative
  rewardNative: VoteNative
}

enum TransactionKind {
  TRANSFER_TO
  TRANSFER_FROM
  VOTE
  REWARD
}

type AccountTransaction {
  id: String!
  voteResult: VoteResult
  txKind: TransactionKind
  account: Account!
  blockchainTag: BlockchainTag!
  amount: BigInt!
  ownerPublicKey: String!
  senderOrTargetPublicKey: String
  blockchain: Blockchain!
  timestamp: DateTime!
  success: Boolean!
  transaction: Transaction!
}

enum VoteResult {
  AYE
  NAY
}

type HistoryUpdateSubscription {
  id: String!
  account: Account!
  createdAt: DateTime!
  executedAt: DateTime
  latestHistoryRequestAt: DateTime!
  updateIntervalMs: Int!
}

type Account {
  id: String!
  transactions: [AccountTransaction!]!
  updateSubscriptions: [HistoryUpdateSubscription!]
  latestProcessedBlock: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type FindTransactionsHistoryResponseDto {
  data: [AccountTransaction!]!
  total: Int
  offset: Int
  pageSize: Int
}

type RefreshTxHistoryResponseDto {
  success: Boolean
}

type Query {
  accountTxHistory(args: FindAccountTxHistoryArgs!): FindTransactionsHistoryResponseDto!
}

input FindAccountTxHistoryArgs {
  where: FindAccountTxHistoryWhereParams!
  offset: Int = 0
  pageSize: Int = 30
  orderBy: FindAccountTxHistoryOrderBy = timestamp
  orderDirection: QueryOrder = DESC
}

input FindAccountTxHistoryWhereParams {
  publicKey: String
  blockchainTag: [BlockchainTag!]
  txKind: [TransactionKind!]
  success: Boolean = true
}

enum FindAccountTxHistoryOrderBy {
  timestamp
}

enum QueryOrder {
  DESC
  ASC
}

type Mutation {
  refreshAccountTxHistory(args: EnqueueAccountAggregationJobInput!): RefreshTxHistoryResponseDto!
}

input EnqueueAccountAggregationJobInput {
  publicKey: String!
  jobName: String!
  jobOptions: JSON
}